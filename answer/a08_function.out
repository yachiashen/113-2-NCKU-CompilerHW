fn       	 FUNC
main     	 IDENT
(        	 LPAREN
)        	 RPAREN
{        	 LBRACE
         	 NEWLINE
another_function 	 IDENT
(        	 LPAREN
)        	 RPAREN
;        	 SEMICOLON
         	 NEWLINE
let      	 LET
x        	 IDENT
:        	 COLON
i32      	 INT
=        	 ASSIGN
3        	 INT_LIT
;        	 SEMICOLON
         	 NEWLINE
let      	 LET
y        	 IDENT
:        	 COLON
i32      	 INT
=        	 ASSIGN
2        	 INT_LIT
;        	 SEMICOLON
         	 NEWLINE
if       	 IF
is_divisible_by 	 IDENT
(        	 LPAREN
x        	 IDENT
,        	 COMMA
y        	 IDENT
)        	 RPAREN
{        	 LBRACE
         	 NEWLINE
println  	 PRINTLN
(        	 LPAREN
"        	 QUOTA
divisible 	 STRING_LIT
"        	 QUOTA
)        	 RPAREN
;        	 SEMICOLON
         	 NEWLINE
}        	 RBRACE
else     	 ELSE
{        	 LBRACE
         	 NEWLINE
println  	 PRINTLN
(        	 LPAREN
"        	 QUOTA
not divisible 	 STRING_LIT
"        	 QUOTA
)        	 RPAREN
;        	 SEMICOLON
         	 NEWLINE
}        	 RBRACE
         	 NEWLINE
}        	 RBRACE
         	 NEWLINE
         	 NEWLINE
fn       	 FUNC
another_function 	 IDENT
(        	 LPAREN
)        	 RPAREN
{        	 LBRACE
         	 NEWLINE
println  	 PRINTLN
(        	 LPAREN
"        	 QUOTA
another_function 	 STRING_LIT
"        	 QUOTA
)        	 RPAREN
;        	 SEMICOLON
         	 NEWLINE
}        	 RBRACE
         	 NEWLINE
         	 NEWLINE
// Function that returns a boolean value 	 COMMENT
         	 NEWLINE
fn       	 FUNC
is_divisible_by 	 IDENT
(        	 LPAREN
lhs      	 IDENT
:        	 COLON
i32      	 INT
,        	 COMMA
rhs      	 IDENT
:        	 COLON
i32      	 INT
)        	 RPAREN
->       	 ARROW
bool     	 BOOL
{        	 LBRACE
         	 NEWLINE
// Corner case, early return 	 COMMENT
         	 NEWLINE
if       	 IF
rhs      	 IDENT
==       	 EQL
0        	 INT_LIT
{        	 LBRACE
         	 NEWLINE
return   	 RETURN
false    	 FALSE
;        	 SEMICOLON
         	 NEWLINE
}        	 RBRACE
         	 NEWLINE
         	 NEWLINE
// This is an expression, the `return` keyword is not necessary here 	 COMMENT
         	 NEWLINE
lhs      	 IDENT
%        	 REM
rhs      	 IDENT
==       	 EQL
0        	 INT_LIT
         	 NEWLINE
}        	 RBRACE

Finish scanning,
total line: 25
comment line: 3
